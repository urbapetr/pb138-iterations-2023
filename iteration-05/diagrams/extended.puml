@startuml social_network_extended

hide circle
skinparam Linetype ortho
skinparam Ranksep 60
skinparam Nodesep 100

entity User {
    * id: <<uuid>>
    ---
    * userName: string
    * email: string
    * createdAt: timestamp
    ' never store passwords as plaintext!
    * hashedPassword: string
    * salt: string
    deletedAt: timestamp
    * avatar: URL
}

entity Post {
    * id: <<uuid>>
    ---
    * creatorId: <<FK>>
    * createdAt: timestamp
    * editedAt: timestamp
    deletedAt: timestamp
    * content: string
}

entity Comment {
    * id: <<uuid>>
    ---
    * postId: <<FK>>
    * commenterId: <<FK>>
    * createdAt: timestamp
    deletedAt: timestamp
    * content: string
}

entity PostEdit {
    * id: <<uuid>>
    ---
    * postId: <<FK>>
    * editedAt: timestamp
    * originalContent: string
}

User ||..o{ Post: creates
User ||..o{ Comment: comments
Post ||..o{ Comment
Post ||..o{ PostEdit

' --- TODO: YOUR ERD EXTENSION

entity Reaction {
    * id: <<uuid>>
    ---
    * postId: <<FK>>
    * reactorId: <<FK>>
    * createdAt: timestamp
    * type: string
}

entity DirectMessage {
    * id: <<uuid>>
    ---
    * senderId: <<FK>>
    * recipientId: <<FK>>
    * replyId: <<FK>>
    * createdAt: timestamp
    * content: string
}

entity GroupChat {
    * id: <<uuid>>
    ---
    * adminId: <<FK>>
    * name: string
}

entity GroupChatMemeber {
    * id: <<uuid>>
    ---
    * groupId: <<FK>>
    * userId: <<FK>>
    * isAdmin: boolean
}

User ||--{ Reaction : reacts
Post ||--{ Reaction : has reactions
DirectMessage ||--o{ DirectMessage : replies to
User }--|| GroupChatMemeber : has admin role
GroupChatMemeber }--|| GroupChat : is member of
User ||--|{ DirectMessage : recipient
User ||--o{ DirectMessage : sender
GroupChat ||--{ DirectMessage : contains

@enduml