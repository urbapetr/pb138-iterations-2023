// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./database.db"
}

model User {
  id             String    @id @default(uuid())
  userName       String    @unique
  email          String    @unique
  createdAt      DateTime  @default(now())
  hashedPassword String
  salt           String
  deletedAt      DateTime?
  avatar         String
  posts          Post[]
  comments       Comment[]
  reactions      Reaction[]
  sentMessages   Message[] @relation("sender")
  receivedMessages Message[] @relation("receiver")
  groupChats      GroupChat[] @relation("members")
  adminChats     GroupChat[] @relation("admins")
}

model Post {
  id        String     @id @default(uuid())
  creator   User       @relation(fields: [creatorId], references: [id])
  creatorId String
  createdAt DateTime   @default(now())
  editedAt  DateTime   @updatedAt
  deletedAt DateTime?
  content   String
  history   PostEdit[]
  comments  Comment[]
  reactions Reaction[]
}

model PostEdit {
  id       String   @id @default(uuid())
  post     Post     @relation(fields: [postId], references: [id])
  postId   String
  editedAt DateTime
  content  String
}

model Comment {
  id          String    @id @default(uuid())
  post        Post      @relation(fields: [postId], references: [id])
  postId      String
  commenter   User      @relation(fields: [commenterId], references: [id])
  commenterId String
  createdAt   DateTime  @default(now())
  deletedAt   DateTime?
  content     String
}

model Reaction {
  id       String   @id @default(uuid())
  type     String
  user     User     @relation(fields: [userId], references: [id])
  userId   String
  post     Post?    @relation(fields: [postId], references: [id])
  postId   String?
}

model GroupChat {
  id       String    @id @default(uuid())
  createdAt DateTime  @default(now())
  name     String?
  members User[] @relation("members")
  messages Message[] @relation("chatMessages")
  admins   User[]   @relation("admins")
}

model Message {
  id           String   @id @default(uuid())
  sender       User     @relation("sender", fields: [senderId], references: [id])
  senderId     String
  receiver     User     @relation("receiver", fields: [receiverId], references: [id])
  receiverId   String
  createdAt    DateTime @default(now())
  content      String
  groupChat    GroupChat? @relation("chatMessages", fields: [groupChatId], references: [id])
  groupChatId  String?
}
